---
// Generator.astro
import { getLangFromUrl, useTranslations } from "@/i18n/utils";
import { Copy, Trash, Check } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader } from "@/components/ui/card";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const invisibleChars = {
  hangulFiller: "\u2800",
  invisibleSeparator: "\u2063",
  zeroWidth: "\u200B",
  noBreakSpace: "\u00A0",
  wordJoiner: "\u2060",
  softHyphen: "\u00AD",
};

const invisibleCharacters = {
  "U+2800": "⠀",
  "U+2063": "⁣",
  "U+200B": "​",
  "U+200C": "‌",
  "U+200D": "‍",
  "U+FEFF": "﻿",
};
---

<div class="space-y-8 mx-auto px-6 md:px-8">
  <div class="grid gap-8 md:grid-cols-2">
    <!-- Method 1: Copy with Button -->
    <Card className="bg-white ">
      <CardHeader>
        <div class="justify-start">
          <span
            class="mx-auto rounded-full bg-zinc-600 text-white text-[14px] px-2 py-1/2"
          >
            {t("method1.label")}
          </span>
        </div>
        <h3 class="mt-0 font-bold text-2xl">{t("method1.heading")}</h3>
      </CardHeader>
      <CardContent className="space-y-2">
        <Button
          id="copyButton1"
          className="copy-button flex items-center gap-2"
        >
          <span class="copy-icon"><Copy className="h-4 w-4" /></span>
          <span class="check-icon hidden"><Check className="h-4 w-4" /></span>
          <span class="button-text">{t("method1.button")}</span>
        </Button>
        <p class="text-md text-gray-600">{t("method1.description")}</p>
      </CardContent>
    </Card>

    <!-- Method 2: Select and Copy -->
    <Card className="bg-white">
      <CardHeader>
        <div class="justify-start">
          <span
            class="mx-auto rounded-full bg-zinc-600 text-white text-[14px] px-2 py-1/2"
          >
            {t("method1.label")}
          </span>
        </div>
        <h3 class="mt-0 font-bold text-2xl">{t("method2.heading")}</h3>
      </CardHeader>
      <CardContent className="flex flex-col gap-2">
        <div class="flex flex-row gap-2">
          <div
            class="w-full h-10 p-2 bg-gray-50 dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md overflow-auto"
            id="selectBox"
          >
            ⠀
          </div>
          <Button id="selectButton" className="h-10"
            >{t("method2.button")}</Button
          >
        </div>
        <p class="text-md text-gray-600">{t("method2.description")}</p>
      </CardContent>
    </Card>
  </div>

  <!-- Method 3: Generate -->
  <div
    class="space-y-4 p-4 rounded-lg border border-gray-sm shadow-md lg:gap-8 bg-white grid grid-cols-1 md:grid-cols-2 md:gap-4"
  >
    <div class="p-2">
      <div class="justify-start">
        <span
          class="mx-auto rounded-full bg-zinc-600 text-white text-[14px] px-2 py-1/2"
        >
          {t("method1.label")}
        </span>
      </div>
      <h3 class="font-bold text-2xl py-4">{t("method3.title")}</h3>
      <p class="text-md text-gray-600 mb-4">{t("method3.description")}</p>
      <ol class="list-inside text-md list-decimal text-gray-600 mb-4">
        <li>{t("method3.step1")}</li>
        <li>{t("method3.step2")}</li>
        <li>{t("method3.step3")}</li>
      </ol>
      <p class="text-md text-gray-600">{t("method3.p")}</p>
    </div>
    <div class="space-y-2 p-2">
      <select
        aria-label="Choose Character Type"
        id="charType"
        class="w-full p-1 h-9 border rounded"
      >
        <option value="lowercase">Select a character type</option>
        <option value="hangulFiller">Braille blank - U+2800: [⠀]</option>
        <option value="invisibleSeparator"
          >Invisible Separator - U+2063: [⁣]</option
        >
        <option value="zeroWidth">Zero Width Space - U+200B: [​]</option>
        <option value="noBreakSpace">No-Break Space</option>
        <option value="wordJoiner">Word Joiner</option>
        <option value="softHyphen">Soft Hyphen</option>
      </select>
      <div class="grid grid-cols-2 gap-2">
        <input
          type="number"
          id="charCount"
          min="1"
          max="100"
          value="1"
          class="bg-gray-100 h-9 w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          placeholder="Number of characters (1-100)"
        />

        <Button
          id="generateButton"
          className="w-full bg-black text-white hover:bg-gray-900"
        >
          {t("method3.button")}
        </Button>
      </div>
      <textarea
        id="outputArea"
        readonly
        class="bg-gray-100 w-full h-24 p-2 border rounded-lg resize-none dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        placeholder="Generated characters will appear here..."></textarea>

      <div
        class="flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-4"
      >
        <div class="text-sm text-gray-500 dark:text-gray-400">
          {t("extra_section.character_count")}
          <span id="charCounter">0</span>
        </div>

        <div class="flex space-x-2">
          <Button id="copyButton3" className="flex items-center gap-2">
            <span class="copy-icon"><Copy className="h-4 w-4" /></span>
            <span class="check-icon hidden"><Check className="h-4 w-4" /></span>
            <span class="button-text">{t("button.copy")}</span>
          </Button>

          <Button
            id="clearButton"
            className="flex items-center gap-2"
          >
            <Trash className="text-red-500 h-2 w-2" />
            <span>Clear</span>
          </Button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  const invisibleChars = {
    hangulFiller: "\u2800",
    invisibleSeparator: "\u2063",
    zeroWidth: "\u200B",
    noBreakSpace: "\u00A0",
    wordJoiner: "\u2060",
    softHyphen: "\u00AD",
  };

  // Method 1: Quick Copy
  const copyButton1 = document.getElementById("copyButton1");
  copyButton1?.addEventListener("click", async () => {
    await copyToClipboard("\u2800", copyButton1);
  });

  // Method 2: Select and Copy
  const selectButton = document.getElementById("selectButton");
  const selectBox = document.getElementById("selectBox");
  selectButton?.addEventListener("click", () => {
    const range = document.createRange();
    range.selectNodeContents(selectBox!);
    const selection = window.getSelection();
    selection?.removeAllRanges();
    selection?.addRange(range);
  });

  // Method 3: Generate
  const generateButton = document.getElementById("generateButton");
  const charTypeSelect = document.getElementById(
    "charType",
  ) as HTMLSelectElement;
  const charCountInput = document.getElementById(
    "charCount",
  ) as HTMLInputElement;
  const outputArea = document.getElementById(
    "outputArea",
  ) as HTMLTextAreaElement;
  const charCounter = document.getElementById("charCounter");
  const copyButton3 = document.getElementById("copyButton3");
  const clearButton = document.getElementById("clearButton");

  generateButton?.addEventListener("click", () => {
    if (
      !charTypeSelect.value ||
      !(charTypeSelect.value in invisibleChars)
    ) {
      alert("Please select a valid character type.");
      return;
    }
    const char =
      invisibleChars[charTypeSelect.value as keyof typeof invisibleChars];
    const count = Math.max(
      1,
      Math.min(100, parseInt(charCountInput.value) || 1),
    );
    const generated = Array(count).fill(char).join("");
    outputArea.value = generated;
    updateCharCount();
  });

  copyButton3?.addEventListener("click", async () => {
    await copyToClipboard(outputArea.value, copyButton3);
  });

  clearButton?.addEventListener("click", () => {
    outputArea.value = "";
    updateCharCount();
  });

  function updateCharCount() {
    if (charCounter) {
      charCounter.textContent = outputArea.value.length.toString();
    }
  }

  async function copyToClipboard(text: string, button: HTMLElement) {
    try {
      await navigator.clipboard.writeText(text);
      const buttonText = button.querySelector(".button-text");
      const copyIcon = button.querySelector(".copy-icon");
      const checkIcon = button.querySelector(".check-icon");

      if (buttonText && copyIcon && checkIcon) {
        buttonText.textContent = "Copied!";
        copyIcon.classList.add("hidden");
        checkIcon.classList.remove("hidden");

        setTimeout(() => {
          buttonText.textContent = "Copy To Clipboard";
          copyIcon.classList.remove("hidden");
          checkIcon.classList.add("hidden");
        }, 2000);
      }
    } catch (err) {
      console.error("Failed to copy:", err);
    }
  }
</script>
